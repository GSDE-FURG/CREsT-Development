/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package writers;

import datastructures.Cell;
import datastructures.Circuit;
import datastructures.Gate;
import datastructures.Signal;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;

/**
 *
 * @author matheus
 */
public class VerilogWriter {
    public int getBiggerLength(Circuit circuit) {
        int length = 0;
        for (int i = 0; i < circuit.getGates().size(); i++) {
            if(circuit.getGates().get(i).getType().getName().length() > length) {
                length = circuit.getGates().get(i).getType().getName().length();
            }
        }
        return length;
    }
    
    public VerilogWriter(String filename, Circuit circuit) {
        Writer writer = null;
        int length = getBiggerLength(circuit);
        int contador;

        try {
            writer = new BufferedWriter(new OutputStreamWriter(
                  new FileOutputStream(filename), "utf-8"));
            
            /*
            ## WRITE FILE HEADER
            */
            writer.write("//\n");
            writer.write("// Generated by GSDE Circuit at " + Calendar.getInstance().getTime() + "\n");
            writer.write("//\n\n");
            
            /*
            ## START VERILOG FILE: "module <name> ("
            */
            writer.write("module " + circuit.getName() + " (\n    ");
            
            
            /*
            ## WRITE MODULE IOS
            */
            contador = 0;
            for (int i = 0; i < circuit.getInputs().size(); i++) {
                writer.write(circuit.getInputs().get(i).getId() + ", ");
                contador++;
                if(contador == 10) {
                    writer.write("\n    ");
                    contador = 0;
                }
            }
            
            for (int i = 0; i < circuit.getOutputs().size(); i++) {
                writer.write(circuit.getOutputs().get(i).getId());
                
                if(i < circuit.getOutputs().size() - 1) {
                    writer.write(", ");
                }
                
                contador++;
                if(contador == 10) {
                    writer.write("\n    ");
                    contador = 0;
                }
            }
            /*
            ## END OF MODULE PART
            */
            writer.write(");\n");
            
            /*
            ## START OF INPUTS
            */
            writer.write("  input ");
            
            contador = 0; 
            for (int i = 0; i < circuit.getInputs().size(); i++) {
                writer.write(circuit.getInputs().get(i).getId());
                
                if(i < circuit.getInputs().size() - 1) {
                    writer.write(", ");
                }
                
                contador++;
                if(contador == 10) {
                    writer.write("\n    ");
                    contador = 0;
                }
            }
            /*
            ## END OF INPUT STATEMENT
            */
            writer.write(";\n");
            
            /*
            ## START OF OUTPUTS DECLARATION
            */
            writer.write("  output ");
            
            contador = 0; 
            for (int i = 0; i < circuit.getOutputs().size(); i++) {
                writer.write(circuit.getOutputs().get(i).getId());
                
                if(i < circuit.getOutputs().size() - 1) {
                    writer.write(", ");
                }
                
                contador++;
                if(contador == 10) {
                    writer.write("\n    ");
                    contador = 0;
                }
            }
            
            /*
            ## END OF OUTPUT STATEMENT
            */
            writer.write(";\n");
            
            
            /*
            ## START OF WIRE STATEMENT
            */
            writer.write("  wire ");
            
            contador = 0; 
            for (int i = 0; i < circuit.getSignals().size(); i++) {
                Signal fooSignal = circuit.getSignals().get(i);
                if((fooSignal.getOrigin() != null) && (!fooSignal.getDestiny().isEmpty())) {
                    
                    writer.write(fooSignal.getId());
                    
                    if(i < circuit.getSignals().size() - 1) {
                        writer.write(", ");
                    }
                    contador++;
                }
               
                if(contador == 10) {
                    writer.write("\n    ");
                    contador = 0;
                }
            }
            
            /*
            ## END OF WIRE STATEMENT
            */
            writer.write(";\n");
            
            /*
            ## START OF GATE STATEMENT
            */
            for (int i = 0; i < circuit.getGates().size(); i++) {
                Gate fooGate = circuit.getGates().get(i);
                //writer.write("  " + fooGate.getType().getName() + "  " + fooGate.getId() + "(");
                writer.write("  " + fooGate.getType().getName() + String.join("", Collections.nCopies((length - fooGate.getType().getName().length()) + 2, " ")) + fooGate.getId() + "(");
                
                for (int j = 0; j < fooGate.getInputs().size(); j++) {
                    writer.write("." + fooGate.getType().getInputs().get(j) + "(" + fooGate.getInputs().get(j).getId() + "), ");
                }
                for (int j = 0; j < fooGate.getOutputs().size(); j++) {
                    writer.write("." + fooGate.getType().getOutputs().get(j) + "(" + fooGate.getOutputs().get(j).getId() + ")");
                    if(j < fooGate.getOutputs().size() - 1) {
                        writer.write(", ");
                    }
                }
                writer.write(");\n");
            }
            
            writer.write("endmodule");
            writer.close();
        } catch (IOException ex) {
        } finally {
           try {writer.close();} catch (Exception ex) {/*ignore*/}
        }
    }
    
}
